<?xml version="1.0" encoding="UTF-8"?>

<ruleset name="Pitaya">
    <description>
        Coding standards for Pitaya (Combination of PSR1, PSR2, FuelPHP, and custom)
    </description>

    <exclude-pattern>tests/*</exclude-pattern>

    <!-- PHP Tags -->
    <!-- PHP 程式碼應該使用 <?php ?> 或 <?= ?> 標記，不應該使用其他形式。 -->
    <rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
        <severity>0</severity>
    </rule>

    <!-- 字元編碼 -->
    <!-- PHP 程式碼應該只使用沒有 BOM 的 UTF-8 編碼。 -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- 所有 PHP 檔案應該使用 Unix LF (linefeed) 行結尾。 -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- 所有 PHP 檔案應該以一個空白行為結尾。 -->
    <!-- checked in Files/EndFileNewlineSniff -->

    <!-- 結束標記 ?> 在純 PHP 檔案中應該被省略。 -->
    <rule ref="Zend.Files.ClosingTag"/>

    <!--
        檔案命名
        所有檔案都應該是小寫，沒有例外。
        Checked in Pitaya.NamingConventions.LowerCaseFileName
    -->

    <!--
        ######################
        # Naming Conventions #
        ######################
    -->

    <!-- Namespace and Use Declarations -->

    <!-- When present, there MUST be one blank line after the namespace declaration. -->
    <!-- checked in Namespaces/NamespaceDeclarationSniff -->

    <!-- When present, all use declarations MUST go after the namespace declaration.
         There MUST be one use keyword per declaration.
         There MUST be one blank line after the use block. -->
    <!-- checked in Namespaces/UseDeclarationSniff -->

    <!--
        Classes

        Class names should use underscores to separate words, and each word 
        in the class name should begin with a capital letter. 
    -->
    <rule ref="PEAR.NamingConventions.ValidClassName"/>

    <!-- Class constants MUST be declared in all upper case with underscore separators. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- Methods -->
    <!-- Visibility MUST be declared on all methods. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <!-- checked in Methods/MethodDeclarationSniff -->
    <!-- Methods names MUST NOT be declared with a space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

    <!-- Methods Arguments -->
    <!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>
    <!-- Methods arguments with default values MUST go at the end of the argument list. -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. When the argument list is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>

    <!-- abstract, final, and static -->
    <!-- When present, the abstract and final declarations MUST precede the visibility declaration.
         When present, the static declaration MUST come after the visibility declaration. -->
    <!-- checked in Methods/MethodDeclarationSniff -->

    <!-- Methods and Function Calls -->
    <!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
    Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="allowMultipleArguments" value="false"/>
        </properties>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>

    <!-- Control Structures -->
    <!-- The general style rules for control structures are as follows:
    There MUST be one space after the control structure keyword
    There MUST NOT be a space after the opening parenthesis
    There MUST NOT be a space before the closing parenthesis
    There MUST be one space between the closing parenthesis and the opening brace
    The structure body MUST be indented once
    The closing brace MUST be on the next line after the body -->
    <rule ref="Squiz.ControlStructures.ControlSignature">
        <properties>
            <property name="ignoreComments" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <!-- checked in ControlStructures/ControlStructureSpacingSniff -->

    <!-- The body of each structure MUST be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body. -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- if, elseif, else -->
    <!-- The keyword elseif SHOULD be used instead of else if so that all control keywords look like single words. -->
    <!-- checked in ControlStructures/ElseIfDeclarationSniff -->

    <!-- switch, case -->
    <!-- The case statement MUST be indented once from switch, and the break keyword (or other terminating keyword) MUST be indented at the same level as the case body. There MUST be a comment such as // no break when fall-through is intentional in a non-empty case body. -->
    <!-- checked in ControlStructures/SwitchDeclarationSniff -->

    <!-- Closures -->
    <!-- Closures MUST be declared with a space after the function keyword, and a space before and after the use keyword.
    The opening brace MUST go on the same line, and the closing brace MUST go on the next line following the body.
    There MUST NOT be a space after the opening parenthesis of the argument list or variable list, and there MUST NOT be a space before the closing parenthesis of the argument list or variable list.
    In the argument list and variable list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
    Closure arguments with default values MUST go at the end of the argument list.
    Argument lists and variable lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument or variable per line.
    When the ending list (whether or arguments or variables) is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
    <!-- checked in Squiz.Functions.MultiLineFunctionDeclaration -->

    <!--
        Keywords

        Keywords such as true, false, null, as, etc should be all lower case, as upper case 
        is reserved for constants. 
        Same goes for primitive types like array, integer, string.
    -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration" />

    <!-- Lines -->
    <!-- The soft limit on line length MUST be 120 characters; automated style checkers MUST warn but MUST NOT error at the soft limit. -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>

    <!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>0</severity>
    </rule>

    <!-- There MUST NOT be more than one statement per line. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- Indenting -->
    <!-- Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!--
        ##################################
        # Comparisons, Logical operators #
        ##################################
    -->
    
    <!--
        Comparing function/method returns and variables should be type aware, for example some functions may return false,
        and when comparing this return the type sensitive operators such as === or !==.
        Additionally, use of and or or is preferred over && or || for readability. 
        In some cases, this cannot be avoided and the use of && or || as its required may be used. 
        The ! should have spaces on both sides when used.
        
        The latter is checked in Pitaya.WhiteSpace.NotOperatorSpacing
    -->

    <!--
        Class/Interface Declarations

        Class/interface declarations have the opening brace on the following line.
        In case the class is empty, braces will be on the same line as the definition.
        
        Checked in Pitaya.Classes.ClassDeclaration
    -->

    <!--
        Brackets and Parenthesis

        No space should come before or after the initial bracket/parenthesis. 
        There should not be a space before closing bracket/parenthesis.
    -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />

    <!--
        Concatenation

        String concatenation should not contain spaces around the joined parts.
    -->
    <rule ref="Squiz.Strings.ConcatenationSpacing" />

    <!--
        Operators

        Space before and after logical operator.
        Space before and after math operator.
        No space before and after increment.
        
        The latter is checked in Pitaya.WhiteSpace.IncrementDecrementSpacing
    -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />
    <rule ref="Squiz.WhiteSpace.OperatorSpacing" />
</ruleset>